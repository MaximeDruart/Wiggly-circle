{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["gui","dat","App","props","sketch","p","setup","createCanvas","windowWidth","windowHeight","stroke","angleMode","DEGREES","yOffset","ctrl","this","noiseStrength","vertexCount","yOffsetIncrement","size","value","baseValue","variation","baseSize","add","draw","clear","translate","noFill","map","noise","constrain","beginShape","j","i","angle","xValue","cos","yValue","sin","curveVertex","endShape","state","canvas","setState","p5","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAKMA,G,MAAM,IAAIC,KAuGDC,E,YApGd,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAMPC,OAAS,SAAAC,GACRA,EAAEC,MAAQ,WACTD,EAAEE,aAAaF,EAAEG,YAAaH,EAAEI,cAChCJ,EAAEK,OAAO,GACTL,EAAEM,UAAUN,EAAEO,UAIf,IAeIC,EAAU,EACVC,EAAO,IAhBD,WACTC,KAAKC,cAAgB,IACrBD,KAAKE,YAAc,GACnBF,KAAKG,iBAAmB,IACxBH,KAAKI,KAAO,CACXC,MAAO,IACPC,UAAW,IACXC,UAAW,KAEZP,KAAKL,OAAS,CACbS,KAAM,GACNI,SAAU,GACVD,UAAW,IAMbtB,EAAIwB,IAAIV,EAAM,gBAAiB,IAAM,IACrCd,EAAIwB,IAAIV,EAAM,cAAe,EAAG,IAAK,GACrCd,EAAIwB,IAAIV,EAAM,mBAAoB,IAAM,IAIxCT,EAAEoB,KAAO,WACRpB,EAAEqB,QACFrB,EAAEsB,UAAUtB,EAAEG,YAAc,EAAGH,EAAEI,aAAe,GAChDI,GAAWC,EAAKI,iBAChBb,EAAEuB,SACFd,EAAKJ,OAAOS,MAAQd,EAAEwB,IAAIxB,EAAEyB,MAAMjB,GAAU,EAAG,GAAI,EAAG,GACtDC,EAAKJ,OAAOS,KAAOd,EAAE0B,UACpBjB,EAAKJ,OAAOS,KACZL,EAAKJ,OAAOa,SAAWT,EAAKJ,OAAOY,UACnCR,EAAKJ,OAAOa,SAAWT,EAAKJ,OAAOY,WAEpCR,EAAKK,KAAKC,OAASf,EAAEwB,IAAIxB,EAAEyB,MAAM,EAAG,EAAGjB,GAAU,EAAG,GAAI,EAAG,GAC3DC,EAAKK,KAAKC,MAAQf,EAAE0B,UACnBjB,EAAKK,KAAKC,MACVN,EAAKK,KAAKE,UAAYP,EAAKK,KAAKG,UAChCR,EAAKK,KAAKE,UAAYP,EAAKK,KAAKG,WAEjCjB,EAAE2B,aACF,IACC,IAAIC,EAAInB,EAAKK,KAAKC,MAAQN,EAAKJ,OAAOS,KACtCc,EAAInB,EAAKK,KAAKC,MAAQN,EAAKJ,OAAOS,KAClCc,IAEA,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAKG,YAAaiB,IAAK,CAC1C,IAAIC,EAAQ9B,EAAEwB,IAAIK,EAAG,EAAGpB,EAAKG,YAAa,EAAG,KACzCmB,EACH/B,EAAEgC,IAAIF,GACNF,EACA5B,EAAEwB,IACDxB,EAAEyB,MAAMK,EAAOtB,GACf,EACA,EACA,EAAIC,EAAKE,cACT,EAAIF,EAAKE,eAEPsB,EACHjC,EAAEkC,IAAIJ,GACNF,EACA5B,EAAEwB,IACDxB,EAAEyB,MAAMK,EAAOtB,GACf,EACA,EACA,EAAIC,EAAKE,cACT,EAAIF,EAAKE,eAEXX,EAAEmC,YAAYJ,EAAQE,GAGxBjC,EAAEoC,aArFH,EAAKC,MAAQ,CACZC,OAAQ,IAHS,E,iFA4FlB5B,KAAK6B,SAAS,CAAED,OAAQ,IAAIE,IAAG9B,KAAKX,Y,+BAIpC,OAAO,yBAAK0C,UAAU,Y,GAjGNC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a402e9a.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport p5 from \"p5\"\nimport * as dat from \"dat.gui\"\nimport \"./App.css\"\n\nconst gui = new dat.GUI()\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tcanvas: \"\"\n\t\t}\n\t}\n\n\tsketch = p => {\n\t\tp.setup = () => {\n\t\t\tp.createCanvas(p.windowWidth, p.windowHeight)\n\t\t\tp.stroke(0)\n\t\t\tp.angleMode(p.DEGREES)\n\t\t\t// p.frameRate(2)\n\t\t}\n\n\t\tconst c = function() {\n\t\t\tthis.noiseStrength = 0.15\n\t\t\tthis.vertexCount = 60\n\t\t\tthis.yOffsetIncrement = 0.01\n\t\t\tthis.size = {\n\t\t\t\tvalue: 280,\n\t\t\t\tbaseValue: 280,\n\t\t\t\tvariation: 100\n\t\t\t}\n\t\t\tthis.stroke = {\n\t\t\t\tsize: 15,\n\t\t\t\tbaseSize: 15,\n\t\t\t\tvariation: 8\n\t\t\t}\n\t\t}\n\t\tlet yOffset = 0\n\t\tlet ctrl = new c()\n\t\t// let yOffset = 0\n\t\tgui.add(ctrl, \"noiseStrength\", 0.05, 0.9)\n\t\tgui.add(ctrl, \"vertexCount\", 5, 180, 1)\n\t\tgui.add(ctrl, \"yOffsetIncrement\", 0.01, 0.2)\n\t\t// gui.add(ctrl.size, \"variation\", 50, 200, 1).name(\"Size variation\")\n\t\t// gui.add(ctrl.stroke, \"variation\", 2, 20, 1).name(\"Stroke variation\")\n\n\t\tp.draw = () => {\n\t\t\tp.clear()\n\t\t\tp.translate(p.windowWidth / 2, p.windowHeight / 2)\n\t\t\tyOffset += ctrl.yOffsetIncrement\n\t\t\tp.noFill()\n\t\t\tctrl.stroke.size += p.map(p.noise(yOffset), 0, 1, -1, 1)\n\t\t\tctrl.stroke.size = p.constrain(\n\t\t\t\tctrl.stroke.size,\n\t\t\t\tctrl.stroke.baseSize - ctrl.stroke.variation,\n\t\t\t\tctrl.stroke.baseSize + ctrl.stroke.variation\n\t\t\t)\n\t\t\tctrl.size.value += p.map(p.noise(0, 0, yOffset), 0, 1, -1, 1)\n\t\t\tctrl.size.value = p.constrain(\n\t\t\t\tctrl.size.value,\n\t\t\t\tctrl.size.baseValue - ctrl.size.variation,\n\t\t\t\tctrl.size.baseValue + ctrl.size.variation\n\t\t\t)\n\t\t\tp.beginShape()\n\t\t\tfor (\n\t\t\t\tlet j = ctrl.size.value - ctrl.stroke.size;\n\t\t\t\tj < ctrl.size.value + ctrl.stroke.size;\n\t\t\t\tj++\n\t\t\t) {\n\t\t\t\tfor (let i = 0; i < ctrl.vertexCount; i++) {\n\t\t\t\t\tlet angle = p.map(i, 0, ctrl.vertexCount, 0, 360)\n\t\t\t\t\tlet xValue =\n\t\t\t\t\t\tp.cos(angle) *\n\t\t\t\t\t\tj *\n\t\t\t\t\t\tp.map(\n\t\t\t\t\t\t\tp.noise(angle, yOffset),\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t1 - ctrl.noiseStrength,\n\t\t\t\t\t\t\t1 + ctrl.noiseStrength\n\t\t\t\t\t\t)\n\t\t\t\t\tlet yValue =\n\t\t\t\t\t\tp.sin(angle) *\n\t\t\t\t\t\tj *\n\t\t\t\t\t\tp.map(\n\t\t\t\t\t\t\tp.noise(angle, yOffset),\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t1 - ctrl.noiseStrength,\n\t\t\t\t\t\t\t1 + ctrl.noiseStrength\n\t\t\t\t\t\t)\n\t\t\t\t\tp.curveVertex(xValue, yValue)\n\t\t\t\t}\n\t\t\t}\n\t\t\tp.endShape()\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({ canvas: new p5(this.sketch) })\n\t}\n\n\trender() {\n\t\treturn <div className=\"App\">{/* <canvas id=\"p5canvas\"></canvas> */}</div>\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}